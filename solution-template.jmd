---
title: "BEE 4750/5750 Homework 3"
author: "Susie Foster (saf253)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
generators= ["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"]
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]'
op_cost = [0, 22, 35, 45, 0, 0]'
co2_emissions = [0 1 0.43 0.55 0 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517 1486 1544 1733 2058 2470 2628 2696 2653 2591 2626 2714 2803 2842 2891 2821 3017 3074 2957 2487 2249 1933 1684 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
penalty= 1000; #/MWh not met
```

# Problem 1

## Problem 1.1
the decision variables for this problem will be:

Installed capacity of generator g (in MW):
$x[g=1:6]$

Energy generated by generator g at time t (in MW):
$y[g=1:6, t=1:24]$ 

## Problem 1.2
Z is the total cost and is calculated by $Z = Z_{investment} + Z_{op} + Z_{demand}$

$Z_{investment}= \sum(investment cost_t*x_t)$

$Z_{op}= \sum(op cost_g*y_{g,t})$

$Z_{demand}= 1000*\sum(shortfall_t)$ 

where shortfall is a soft variable defined by the following constraints:

$shortfall = demand - output$

$shortfall >= 0$

## Problem 1.3
the first constraint is an availability constraint. Generators cannot produce 
more energy than the product of their installed capacity and their capacity factor:

$y<=x*CF$


The shortfall soft variable also has constraints on it illustrated above:

$shortfall = demand - output$

$shortfall >= 0$

the shortfall is the difference between the demand and the actual production (y)
on an hourly basis. This is equivalent to the 'missing' electricity. Since we do not want over-production, shortfall>=0 MW


Both x and y also have a non-negativity constraint, since it's not physically possible for it to be negative. 

$x>0$

$y>0$

Thus all variables are bounded at the low end (0) and the high end, so the set of constraints are complete. 

## Problem 1.4
Implement your optimization problem in JuMP. For this sub-problem, you only need 
to provide a code block with the problem formulation.

```julia
using JuMP
using HiGHS

gencap=Model(HiGHS.Optimizer)
periods= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];
G= 1:length(generators)
T= 1:length(periods)
@variable(gencap, x[G]>=0)
@variable(gencap, y[G, T]>=0)
@variable(gencap, shortfall[T]>=0)
@objective(gencap, Min, investment_cost*x/365+sum(op_cost*y) + 1000*sum(shortfall)) 
avail= zeros(24, 6);  
avail[:, 1].= thermal_cf[1];
avail[:, 2].= thermal_cf[2];
avail[:, 3].= thermal_cf[3];
avail[:, 4].= thermal_cf[4];
avail[:, 5]= wind_cf;
avail[:, 6]= solar_cf;
avail= avail'
@constraint(gencap, availability[g in G, t in T], y[g, t]<=avail[g, t]*x[g])
@constraint(gencap, load[t in T], shortfall[t]' == demand[t] - sum(y[:, t]))
optimize!(gencap)
Z_1=objective_value(gencap)
x_1= value.(x).data
y_1= value.(y).data
shortfall_1= value.(shortfall).data
```

## Problem 1.5
The optimal solution has a total cost of $`j round(Z_1, digits=2)`


The amount of installed capacity for each generator type is as follows:

Geothermal:     `j round(x_1[1], digits=2)` MW

Coal:           `j round(x_1[2], digits=2)` MW

CCGT:           `j round(x_1[3], digits=2)` MW

CT:             `j round(x_1[4], digits=2)` MW

Wind:           `j round(x_1[5], digits=2)` MW

Solar:          `j round(x_1[6], digits=2)` MW


The amount of energy non-served will be: `j round(sum(shortfall_1), digits=0)` MWh


## Problem 1.6
Plot how much electricity will be generated under this plan each hour by each type 
of plant. Make both a line plot for the raw amounts (using plot) and a stacked area 
plot to show relative contributions to the total demand (using areaplot). What are 
your take-aways?

```julia
using Plots

plot(y_1', label=generators, title= "Electricity Generation Per Day", xlabel="Hour", ylabel="Generated Electricity (MW)") 

areaplot(y_1', label=generators,  title= "Electricity Generation Per Day", xlabel="Hour", ylabel="Generated Electricity (MW)"); 
plot!(demand', color=:red, label="demand", linestyle=:dash)
```

Solar energy makes up a large portion of the overall energy portfolio. As one might expect, it doesn't produce anything in the early 
morning or at night. The demand in early morning and at night is mostly met by CCGT, followed by some wind power and some CT.

# Problem 2
The NY state legislature is considering enacting an annual CO limit, which for the utility would limit the emissions in its footprint to 1.5 MtCO/yr.

## Problem 2.1
What changes are needed to your linear program from Problem 1? Formulate any different variables, objectives, and/or constraints.

A new constraint will need to be made to ensure daily production of CO_2 is below the limit.

This can be calculated by $Emissions_total=\sum(y_g*CO2emissions_g) <= CO2limit$
where the CO2limit is in tCO2/day, and CO2emissions_g is in tCO2/MW.
```julia
CO2limit= 1.5*10^6/365 #tCO2 allowed per day
```
## Problem 2.2
```julia
gencapCO2=Model(HiGHS.Optimizer)
@variable(gencapCO2, x[G]>=0);
@variable(gencapCO2, y[G, T]>=0);
@variable(gencapCO2, shortfall[T]>=0);
@objective(gencapCO2, Min, investment_cost*x/365+sum(op_cost*y) + 1000*sum(shortfall))
@constraint(gencapCO2, availability[g in G, t in T], y[g, t]<=avail[g, t]*x[g])
@constraint(gencapCO2, load[t in T], shortfall[t]' == demand[t] - sum(y[:, t]))
@constraint(gencapCO2, sum(y.*co2_emissions') <= CO2limit)
optimize!(gencapCO2)
Z_co2=objective_value(gencapCO2);
x_co2= value.(x).data;
y_co2= value.(y).data;
shortfall_co2= value.(shortfall).data;
```

## Problem 2.3
The optimal solution has a total cost of $`j round(Z_co2, digits=2)`


The amount of installed capacity for each generator type is as follows:

Geothermal:     `j round(x_co2[1], digits=2)` MW

Coal:           `j round(x_co2[2], digits=2)` MW

CCGT:           `j round(x_co2[3], digits=2)` MW

CT:             `j round(x_co2[4], digits=2)` MW

Wind:           `j round(x_co2[5], digits=2)` MW

Solar:          `j round(x_co2[6], digits=2)` MW


The amount of energy non-served will be: `j round(sum(shortfall_co2), digits=0)` MWh

This plan differs from the original quite a lot. Due to the emissions restrictions, the total cost has increased 
by `j round(Z_co2-Z_1, digits=2)` dollars. The amount of CCGT and CT installed has decreased 
by `j round(x_1[3]-x_co2[3], digits=2)` and `j round(x_1[4] - x_co2[4], digits=2)` MW, respectvely. Coal is still 0 MW installed, and 
geothermal increased from 0 MW to `j round(x_co2[1], digits=2)` MW. Interestingly, solar decreased by `j round(x_1[6] - x_co2[6], digits=2)` MW 
and the wind capacity increased by `j round(x_co2[5] - x_1[5], digits=2)` MW


## Problem 2.4
Plot how much electricity will be generated under this plan each hour by each type of plant. Make both a line plot for the raw amounts (using plot) 
and a stacked area plot to show relative contributions to the total demand (using areaplot). What is different from your plan in Problem 1?

```julia
plot(y_co2', label=generators, title= "Electricity Generation Per Day", xlabel="Hour", ylabel="Generated Electricity (MW)") 

areaplot(y_co2', label=generators,  title= "Electricity Generation Per Day", xlabel="Hour", ylabel="Generated Electricity (MW)");
plot!(demand', color=:red, label="demand", linestyle=:dash)
```
The biggest difference between this plan and the last one is the large increase in geothermal energy, and the big decrease 
in fossil fuel sources, CT and CCGT. Both plans still heavily utilize solar during daylight hours as a source of cheap 
electricity, though there is a little less solar in the second plan and more wind. Demand in both is still met (no non-served energy).

## Problem 2.5
What would the value to the utility be of allowing it to emit an additional 1000 tCO/yr?

```julia
CO2limit_new= (1.5*10^6 + 1000)/365;
gencapCO2_2=Model(HiGHS.Optimizer)
@variable(gencapCO2_2, x[G]>=0);
@variable(gencapCO2_2, y[G, T]>=0);
@variable(gencapCO2_2, shortfall[T]>=0);
@objective(gencapCO2_2, Min, investment_cost*x/365+sum(op_cost*y) + 1000*sum(shortfall))
@constraint(gencapCO2_2, availability[g in G, t in T], y[g, t]<=avail[g, t]*x[g])
@constraint(gencapCO2_2, load[t in T], shortfall[t]' == demand[t] - sum(y[:, t]))
@constraint(gencapCO2_2, sum(y.*co2_emissions') <= CO2limit_new)
optimize!(gencapCO2_2)
Z_co2_2=objective_value(gencapCO2_2);
x_co2_2= value.(x).data;
y_co2_2= value.(y).data;

Zdiff= round(Z_co2 - Z_co2_2; digits=2);
print("the value would be (in dollars):")
print(Zdiff)
```

# References
https://www.overleaf.com/learn/latex/Mathematical_expressions

https://docs.julialang.org/en/v1/stdlib/Markdown/

Ed Discussion Board

4750 Class Slides Sets 09, 11, and 12

https://jump.dev/JuMP.jl/stable/tutorials/getting_started/getting_started_with_JuMP/#Getting-started-with-JuMP
