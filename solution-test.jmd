<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
generators= ["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"]
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]'
op_cost = [0, 22, 35, 45, 0, 0]'
co2_emissions = [0 1 0.43 0.55 0 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517 1486 1544 1733 2058 2470 2628 2696 2653 2591 2626 2714 2803 2842 2891 2821 3017 3074 2957 2487 2249 1933 1684 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
penalty= 9000; #/MWh not met
```

# Problem 1

## Problem 1.1
the decision variables for this problem will be the amount of installed capacity for 
each type of power generation method (x_g). 

Installed capacity of generator g (in MW):
$x[g=1:6]$

Energy generated by generator g at time t (in MW):
$y[g=1:6, t=1:24]$ 

## Problem 1.2
Formulate the objective function. Make sure to include any needed derivations or 
justifications for your equation(s).

$Z is the total cost and is calculated by Z = Z_{investment} + Z_{op} + Z_{demand}$
$Z_{investment}= \sum(investment cost_t*x_t)$
$Z_{op}= \sum(op cost_g*y_{g,t})$
$Z_{demand}= 9000*\sum(shortfall_t)$ 

where shortfall is a soft constraint defined by the following constraints:

$output + shortfall = demand$
$shortfall >= 0$


## Problem 1.3
Derive all relevant constraints (you don't need to write them all out, but they 
should all be represented through your notation). Make sure to include any needed 
justifications or derivations. Why is your set of constraints complete?

y<=x*CF

x>0

y>0

## Problem 1.4
Implement your optimization problem in JuMP. For this sub-problem, you only need 
to provide a code block with the problem formulation.

```julia
using JuMP
using HiGHS

gencap=Model(HiGHS.Optimizer)
periods= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];
G= 1:length(generators)
T= 1:length(periods)
@variable(gencap, x[G]>=0)
@variable(gencap, y[G, T]>=0)
@variable(gencap, shortfall[T]>=0)
println("check0")
@objective(gencap, Min, investment_cost*x/365+sum(op_cost*y) + 9000*sum(shortfall)) # +9000*(sum(demand .- y)) but cant figure out how to not have negative values in an array
avail= zeros(24, 6);  
avail[:, 1].= thermal_cf[1];
avail[:, 2].= thermal_cf[2];
avail[:, 3].= thermal_cf[3];
avail[:, 4].= thermal_cf[4];
avail[:, 5]= wind_cf;
avail[:, 6]= solar_cf;
avail= avail'
@constraint(gencap, availability[g in G, t in T], y[g, t]<=avail[g, t]*x[g])
#@constraint(gencap, load[t in T], sum(y[:, t]) == demand[t])
println("check1")
println(size(demand))
println(size(shortfall'))
@constraint(gencap, load[t in T], shortfall[t]' == demand[t] - sum(y[:, t]))
println("check2")
print(gencap)
optimize!(gencap)
Z=objective_value(gencap)
x= value.(x).data
y= value.(y).data
```

## Problem 1.5
Find the optimal solution. How much should the utility build of each type of 
generating plant? What will the total cost be? How much energy will be non-served?

## Problem 1.6
Plot how much electricity will be generated under this plan each hour by each type 
of plant. Make both a line plot for the raw amounts (using plot) and a stacked area 
plot to show relative contributions to the total demand (using areaplot). What are 
your take-aways?

```julia
using Plots

plot(y', label=generators, title= "Electricity Generation Per Day", xlabel="Hour", ylabel="Generated Electricity (MW)") 

areaplot(y', label=generators,  title= "Electricity Generation Per Day", xlabel="Hour", ylabel="Generated Electricity (MW)") 

```

# Problem 2
The NY state legislature is considering enacting an annual CO limit, which for the utility would limit the emissions in its footprint to 1.5 MtCO/yr.

## Problem 2.1
What changes are needed to your linear program from Problem 1? Formulate any different variables, objectives, and/or constraints.

A new constraint will need to be made to ensure daily production of CO_2 is below the limit.
```julia
CO2limit= 1.5*10^6/365 #tCO2 allowed per day
```
## Problem 2.2
Implement the new optimization problem in JuMP. For this sub-problem, you only need to provide a code block with the problem formulation

```julia
gencapCO2=Model(HiGHS.Optimizer)
periods= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];
G= 1:length(generators)
T= 1:length(periods)
@variable(gencapCO2, x[G]>=0)
@variable(gencapCO2, y[G, T]>=0)
@objective(gencapCO2, Min, investment_cost*x/365+sum(op_cost*y)) # +9000*(sum(demand .- y)) but cant figure out how to not have negative values in an array
avail= zeros(24, 6);  
avail[:, 1].= thermal_cf[1];
avail[:, 2].= thermal_cf[2];
avail[:, 3].= thermal_cf[3];
avail[:, 4].= thermal_cf[4];
avail[:, 5]= wind_cf;
avail[:, 6]= solar_cf;
avail= avail'
@constraint(gencapCO2, availability[g in G, t in T], y[g, t]<=avail[g, t]*x[g])
@constraint(gencapCO2, load[t in T], sum(y[:, t]) == demand[t])
@constraint(gencapCO2, sum(y.*co2_emissions') <= CO2limit)
optimize!(gencapCO2)
Z_co2=objective_value(gencapCO2)
x_co2= value.(x).data
y_co2= value.(y).data
```

## Problem 2.3
Find the optimal solution. How much should the utility build of each type of generating plant? What is different from your plan from Problem 1?

## Problem 2.4
Plot how much electricity will be generated under this plan each hour by each type of plant. Make both a line plot for the raw amounts (using plot) 
and a stacked area plot to show relative contributions to the total demand (using areaplot). What is different from your plan in Problem 1?

```julia
plot(y_co2', label=generators, title= "Electricity Generation Per Day", xlabel="Hour", ylabel="Generated Electricity (MW)") 

areaplot(y_co2', label=generators,  title= "Electricity Generation Per Day", xlabel="Hour", ylabel="Generated Electricity (MW)") 
```
## Problem 2.5
What would the value to the utility be of allowing it to emit an additional 1000 tCO/yr?

```julia
CO2limit_new= (1.5*10^6 + 1000)/365;
gencapCO2_2=Model(HiGHS.Optimizer);
periods= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];
G= 1:length(generators);
T= 1:length(periods);
@variable(gencapCO2_2, x[G]>=0);
@variable(gencapCO2_2, y[G, T]>=0);
@objective(gencapCO2_2, Min, investment_cost*x/365+sum(op_cost*y)); # +9000*(sum(demand .- y)) but cant figure out how to not have negative values in an array
avail= zeros(24, 6);  
avail[:, 1].= thermal_cf[1];
avail[:, 2].= thermal_cf[2];
avail[:, 3].= thermal_cf[3];
avail[:, 4].= thermal_cf[4];
avail[:, 5]= wind_cf;
avail[:, 6]= solar_cf;
avail= avail';
@constraint(gencapCO2_2, availability[g in G, t in T], y[g, t]<=avail[g, t]*x[g]);
@constraint(gencapCO2_2, load[t in T], sum(y[:, t]) == demand[t]);
@constraint(gencapCO2_2, sum(y.*co2_emissions') <= CO2limit_new);
optimize!(gencapCO2_2);
Z_co2_2=objective_value(gencapCO2_2);
x_co2_2= value.(x).data;
y_co2_2= value.(y).data;

Zdiff= round(Z_co2 - Z_co2_2; digits=2);
print("the value would be (in dollars):")
print(Zdiff)
```

# References